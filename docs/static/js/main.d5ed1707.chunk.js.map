{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExportApps.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","img","className","src","url","alt","title","getGif","category","a","encodeURI","fetch","resp","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExportApps","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAgB9C,OACI,mCACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,QCLlBG,EAAc,SAACC,GAExB,OACI,sBAAKC,UAAU,wCAAf,UACI,qBAAKC,IAAKF,EAAIG,IAAKC,IAAKJ,EAAIK,QAC5B,4BAAIL,EAAIK,Y,uBCPPC,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACZL,EADY,0FAC6EM,UAAUF,GADvF,sBAECG,MAAMP,GAFP,cAEZQ,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAf,GACnB,MAAM,CACFgB,GAAIhB,EAAIgB,GACRX,MAAOL,EAAIK,MACXF,IAAKH,EAAIiB,OAAOC,iBAAiBf,QATvB,kBAYXW,GAZW,4CAAH,sDCINK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EACdrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAW,WACPjB,EAAOC,GACFiB,MAAM,SAAAxB,GACHsB,EAAS,CACLT,KAAKb,EACLoB,SAAS,SAGtB,CAAEb,IAEEc,EDb2BI,CAAalB,GAAjCU,EAFqB,EAE3BJ,KAAcO,EAFa,EAEbA,QAEtB,OACI,qCACI,oBAAInB,UAAU,wCAAd,SAAuDM,IACrDa,GAAW,mBAAGnB,UAAU,oCAAb,sBACb,qBAAKA,UAAU,YAAf,SAEQgB,EAAOF,KAAI,SAACf,GAAD,OACP,cAAC,EAAD,eAEQA,GADGA,EAAIgB,aEZ1BU,EAAgB,WAAO,IAAD,EACKxC,mBAAS,CAAC,cADf,mBACxByC,EADwB,KACZ1C,EADY,KAG/B,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ0C,EAAWZ,KAAI,SAACR,GAAD,OACX,cAAC,EAAD,CAEIA,SAAYA,GADLA,YCXnCqB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d5ed1707.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories( cats => [ inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={ handleInputChange }\n                />\n            </form>\n        </>\n    )\n}\n\n//agregar una validación de que la función es obligatoria\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from \"react\";\n\nexport const GifGridItem = (img) => {\n\n    return (\n        <div className=\"card animate__animated animate__pulse\">\n            <img src={img.url} alt={img.title}/>\n            <p>{img.title}</p>\n        </div>\n    )\n}","export const getGif = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=3YVhNX4IWgHKFL8xwNQL90YLmuQeoXyT&q=${encodeURI(category)}&limit=10`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from \"react\";\nimport {GifGridItem} from \"./GifGridItem\";\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({category}) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__backInDown\">{category}</h3>\n            { loading && <p className=\"animate__animated animate__fadeIn\">Cargando</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map((img) => (\n                        <GifGridItem\n                            key = {img.id}\n                            {...img}\n                        />\n                    ))\n                }\n\n            </div>\n        </>\n    );\n}","import {useEffect, useState} from \"react\";\nimport {getGif} from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGif(category)\n            .then( img => {\n                setState({\n                    data:img,\n                    loading: false\n                });\n            } );\n    }, [ category ]);\n\n    return state\n}","import React, {useState} from \"react\";\nimport {AddCategory} from \"./components/AddCategory\";\nimport {GifGrid} from \"./components/GifGrid\";\n\nexport const GifExportApps = () => {\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return(\n        <div>\n            <h2>GifExportApp</h2>\n            <AddCategory setCategories ={setCategories} />\n            <hr/>\n            <ol>\n                {\n                    categories.map((category) => (\n                        <GifGrid\n                            key = {category}\n                            category = {category}\n                        />\n                    ))\n                }\n            </ol>\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExportApps} from \"./GifExportApps\";\n\nReactDOM.render(\n    <GifExportApps/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}